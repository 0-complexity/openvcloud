#!/usr/bin/env jspython
from JumpScale import j
from argparse import ArgumentParser
from pkg_resources import parse_version
import sys
import yaml
import fnmatch
import os
from collections import namedtuple

RepoInfo = namedtuple('RepoInfo', 'domain type account reponame path url')
VersionInfo = namedtuple('VersionInfo', 'type name')
skiprepos = []


def get_repo_info(url):
    domain, type_, account, repo, localpath, url = j.do.getGitRepoArgs(url)
    return RepoInfo(domain, type_, account.lower(), repo.rstrip('.git').lower(), localpath, url)


def getServicesFiles(path):
    matches = []
    for root, dirnames, filenames in os.walk(path):
        for filename in fnmatch.filter(filenames, 'service.hrd'):
            matches.append(os.path.join(root, filename))

    return matches


def freeze(export, target):
    changed = False
    for type_ in ('branch', 'tag', 'revision'):
        if type_ != target.type:
            if export.pop(type_, None) is not None:
                changed = True

    if export.get(target.type) != target.name:
        changed = True
        export[target.type] = target.name

    return changed


def changeversion(aysrepo, repos):
    changes = False
    repos = {repo['info'].path: repo for repo in repos}
    for service in getServicesFiles(aysrepo['info'].path):
        hrd = j.core.hrd.get(service)
        exports = hrd.getDictFromPrefix('git.export')
        for index in exports:
            export = exports[index]
            repoinfo = get_repo_info(export['url'])
            target = repos.get(repoinfo.path)
            if target:
                changes |= freeze(export, target['target'])
                hrd.set('git.export.%s' % index, export)
                hrd.save()
    return changes


def get_versions(repo):
    def parse_entry(entry, name):
        if len(entry) != 1:
            j.console.warning('Invalid {} entry {} in repo {}'.format(name, entry, repo['name']))
        return VersionInfo(*entry.items()[0])

    try:
        return parse_entry(repo['source'], 'source'), parse_entry(repo['target'], 'target')
    except KeyError:
        j.console.warning('Repo {} has invalid source/target data'.format(repo['name']))
        sys.exit(1)


def make_tag(repo, tagname, force):
    for tag in repo.repo.tags:
        if tag.name == tagname:
            if force:
                repo.repo.git.tag('-d', tagname)
                break
            else:
                return False
    repo.repo.git.tag(tagname)
    return True


def tag_exists(repo, tagname):
    for tag in repo.repo.tags:
        if tag.name == tagname:
            return True
    return False


def get_branch(repo, tag):
    version = parse_version(tag)
    branchnames = [branch.name for branch in repo.repo.branches]
    branchnames = filter(lambda x: parse_version(x + '_1') < version, branchnames)
    branchnames.sort(key=lambda x: parse_version(x))
    return branchnames[-1]


def prepare_source(repo, force, push_target=True):
    source = repo['source']
    target = repo['target']
    client = repo['client']
    if target.type == 'tag':
        j.console.info('Creating tag {} on {}'.format(target.name, repo['name']))
        client.repo.git.checkout('-B', source.name, 'origin/{0}'.format(source.name))
        if push_target:
            make_tag(client, target.name, force)
            args = ['origin', 'tag', target.name]
            if force:
                args.insert(0, '-f')
            client.repo.git.push(*args)
    elif target.type == 'branch':
        remote = client.repo.remote()
        for ref in remote.refs:
            if ref.remote_head == target.name:
                j.console.info('Switching to existing branch {} on repo {}'.format(target.name, repo['name']))
                origin = target.name
                if force:
                    origin = source.name
                client.repo.git.checkout('-B', target.name, 'origin/{}'.format(origin))
                break
        else:
            j.console.info('Creating branch {} on repo {}'.format(target.name, repo['name']))
            if source.type == 'tag':
                client.repo.git.checkout('-B', target.name, 'tags/{}'.format(source.name))
            else:
                client.repo.git.checkout('-B', target.name, 'origin/{}'.format(source.name))
        if push_target:
            args = ['-u', 'origin', target.name]
            if force:
                args.insert(0, '-f')
            client.repo.git.push(*args)


def main(manifest, force, dry):
    aysrepos = filter(lambda repo: repo.get('ays', False), manifest)
    repos = filter(lambda repo: not repo.get('ays', False), manifest)
    # fill repo
    j.console.notice('Switching to source')
    for repo in manifest:
        source, target = get_versions(repo)
        repo['source'] = source
        repo['target'] = target
        j.console.info('Switching to source {}/{} on {}'.format(source.type, source.name, repo['name']))
        repo['info'] = get_repo_info(repo['url'])
        if j.system.fs.exists(repo['info'].path):
            repo['client'] = j.clients.git.get(repo['info'].path)
            if source.type != 'tag':
                repo['client'].repo.git.fetch('origin', '{0}'.format(source.name))
                repo['client'].repo.git.checkout('-B', source.name, 'remotes/origin/{0}'.format(source.name))
            else:
                repo['client'].repo.git.fetch('origin', '--tags')
                repo['client'].repo.git.checkout('-B', source.name, 'tags/{}'.format(source.name))

        else:
            j.console.info('Cloning {}/{}'.format(repo['info'].account, repo['info'].reponame))
            j.do.pullGitRepo(repo['url'], **{target.type: target.name})
            repo['client'] = j.clients.git.get(repo['info'].path)
        # validate tag and branch
        if target.type == 'tag':
            if tag_exists(repo['client'], target.name) and not force:
                j.console.warning('Tag {} already exists for repo {}'.format(target.name, repo['name']))
                if not j.console.askYesNo('Continue?'):
                    sys.exit(1)
                skiprepos.append(repo)

    j.console.notice('Creating targets')
    for repo in repos:
        if repo in skiprepos:
            print('Skipping existing repo {}'.format(repo['name']))
        prepare_source(repo, force, not dry)

    j.console.notice('Updating AYS repos')
    for repo in aysrepos:
        if repo in skiprepos:
            print('Skipping existing repo {}'.format(repo['name']))
        prepare_source(repo, force, False)
        source = repo['source']
        target = repo['target']
        client = repo['client']
        j.console.info('Switching versions on ays {}'.format(repo['name']))
        if changeversion(repo, repos):
            client.commit('Tagging %s' % target.name)
            j.console.info('Commiting version changes on ays {}'.format(repo['name']))
            args = []
            if force:
                args.append('-f')
            args.append('origin')
            if target.type == 'tag':
                if not dry:
                    make_tag(client, target.name, force)
                args.append('tag')
            args.append(target.name)
            if not dry:
                client.repo.git.push(*args)
                if target.type == 'tag':
                    client.repo.git.reset('--hard', 'origin/%s' % source.name)


if __name__ == '__main__':
    help = """jspython makerelease --release-version <version>
    """

    parser = ArgumentParser(help)
    parser.add_argument("-dry", "--dry-run", dest="dry", action='store_true', default=False, help="Make a dry run")
    parser.add_argument("-f", "--force-version", action='store_true', default=False,
                        dest="force", help="Force recreation of version")
    parser.add_argument("-m", "--manifest", help="Version Manifest", required=True)
    options = parser.parse_args()
    if not j.system.fs.exists(options.manifest):
        j.console.warning('File {} does not exist.'.format(options.manifest))
        sys.exit(1)
    with open(options.manifest) as manifestfd:
        manifest = yaml.load(manifestfd)['repos']
    j.console.warning('''\
WARNING: This command will reset all your repos.
    Do NOT continue if you have uncommited code.
''')

    try:
        if j.console.askYesNo("Are you sure you want to continue? "):
            main(manifest, options.force, options.dry)
    except KeyboardInterrupt:
        sys.exit(1)

