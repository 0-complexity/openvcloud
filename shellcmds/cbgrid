#!/usr/bin/env jspython
from JumpScale import j
from JumpScale.baselib import cmdutils
import JumpScale.grid.osis

try:
    import ujson as json
except:
    import json

import sys,time

j.application.start("cbgrid")

parser = cmdutils.ArgumentParser()
parser.add_argument("action", choices=['listnodes', 'listimages', 'disablenode', 'enablenode', 'vminfo'], help='Command to perform')
parser.add_argument("-v", '--vmid', required=False, help='ID of vmachine')
parser.add_argument("-n", '--nodename', required=False, help='Name of computenode in cb')
parser.add_argument("-i", '--showimages', action='store_true', required=False, help='Show images for compute nodes')

opts = parser.parse_args()

ocl = j.core.osis.getClient(user='root')

if opts.action == 'listnodes':
    print "%(id)-40s %(referenceid)-3s %(status)40s" % {'id': 'ID', 'referenceid': 'Node', 'status': 'Enabled'}
    scl = j.core.osis.getClientForCategory(ocl, 'cloudbroker', 'stack')
    icl = j.core.osis.getClientForCategory(ocl, 'cloudbroker', 'image')
    images = dict()
    if opts.showimages:
        images = { x['id']:x for x in icl.simpleSearch({}) }
    for provider in scl.simpleSearch({}):
        print "%(id)-40s %(referenceId)-40s %(status)s" % provider
        if opts.showimages:
            for image in provider['images']:
                print "%(name)40s %(size)3s" % images[image]

elif opts.action == 'listimages':
    print "%(name)-40s %(size)3s %(cpus)40s" % {'name': 'Name', 'size': 'Size', 'cpus': 'CPU Nodes'}
    icl = j.core.osis.getClientForCategory(ocl, 'cloudbroker', 'image')
    scl = j.core.osis.getClientForCategory(ocl, 'cloudbroker', 'stack')
    nodename = opts.nodename if opts.nodename else None
    imagedict = dict()
    stacks = scl.simpleSearch({'referenceId': nodename})
    for provider in stacks:
        for image in provider['images']:
            imagedict.setdefault(image, list()).append(provider)
    for image in icl.simpleSearch({}):
        if image['id'] in imagedict:
            cpus = [ x['referenceId'] for x in imagedict.get(image['id'], list())]
            cpus = ', '.join(cpus)
            image['cpus'] = cpus
            print "%(name)-40s %(size)3s %(cpus)40s" % image

elif opts.action == 'disablenode':
    scl = j.core.osis.getClientForCategory(ocl, 'cloudbroker', 'stack')
    nodename = opts.nodename
    stacks = scl.simpleSearch({'referenceId': nodename})
    if not stacks:
        print 'There is no node named %s in this cloudbroker grid' % nodename
    else:
        stack = stacks[0]
        stackobj = scl.get(stack['id'])
        stackobj.status = 'DISABLED'
        scl.set(stackobj)
        print 'Node %s was disabled successfully' % nodename

elif opts.action == 'enablenode':
    scl = j.core.osis.getClientForCategory(ocl, 'cloudbroker', 'stack')
    nodename = opts.nodename
    stacks = scl.simpleSearch({'referenceId': nodename})
    if not stacks:
        print 'There is no node named %s in this cloudbroker grid' % nodename
    else:
        stack = stacks[0]
        stackobj = scl.get(stack['id'])
        stackobj.status = 'ENABLED'
        scl.set(stackobj)
        print 'Node %s was enabled successfully' % nodename

elif opts.action == 'deletenode':
    scl = j.core.osis.getClientForCategory(ocl, 'cloudbroker', 'stack')
    nodename = opts.nodename
    stacks = scl.simpleSearch({'referenceId': nodename})
    if not stacks:
        print 'There is no node named %s in this cloudbroker grid' % nodename
    else:
        stack = stacks[0]
        scl.delete(stack['id'])
        print 'Node %s was deleted successfully' % nodename


j.application.stop()
